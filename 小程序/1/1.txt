<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
    <script>

        // 如果在移动端开发有这几个app的 有三个app 原生App 混合App  webApp    
        //     1. 原生app它是在智能手机流行和诞生之后的一个产物 自从ISO和安卓这两个操作系统发布出来之后 就是在互联网上诞生的名词app
        //        app是application的缩写 它的意思是在智能移动终端上的第三方应用程序 而原生app实际是基于原生的 基于一个智能手机的本地操作系统 
        //        比如ISO/安卓等这样的一个应用程序 就是开发原生app 我们需要针对不同的操作系统来选择不同的app开发语言 比如说Java/objectC/C#
        //        你一听它都是跟我们没什么关系 它都是后台的语言 所以说原生app跟我们前端并没有太大的关联 其实语言是app相对应的一点 
        //     2. 一个app就是我们说的WebApp webApp通俗来讲就是我们前端做的网页 用的技术都是我们前端的技术 H5/CSS3  支付宝随便一个概念 例如生活缴费
        //        它就是一个WebApp 你可以理解它是切在手机里的web网页
        //     3. 另一个Hybrid App是混合App  我们现在大多数的app都是混合app 它是原生app与WebApp结合出来的一个产物 为什么把这两个结合起来呢
        //
        //
        //
        //
        // 原生app的缺点是 微信就是原生app 缺点是它很大 占用内存过大 导致很多人不愿意去下载  然后与之对应的webApp的优点是它小 webAPP就是一个网页
        //     你点开它大概就几兆吧 原生App的优点是它流畅 没有什么卡顿的现象 其实它就是在操作系统上 它拿取东西都很快 
        //     所以说它的交互除了在网络特别糟糕的时候 它是有一点点卡的 其他的时候它都是很快的 但是呢webApp它不会 它是一个网页 
        //     你在网页上提交一个东西或者点击一个按钮的时候 它是不是都需要等待一段时间 你点击支付宝中的转账是不是会有一个加载的小圆圈
        //     webApp每次你点进去都需要重新去下载一遍  你做什么交互的时候你都需要它等待读条 如果网络不太好的时候 那你根本就卡死了
        //     这个是webApp的一个缺点 因为它是需要在服务器上去拿取信息 然后再把信息展现给我们前端这样一个过程 我们需要去等 
        //     那是不是webApp除小优点是不是一无用处 因为它干什么都卡 我们都要等 我们用户不愿意去等 它还有一个优点 它是原生App怎么都做不到的一点
        //     就是它能够随时的去更新 我们知道在更改一些代码的时候我们保存提交到服务器上之后 用户再去访问链接的时候 
        //     用户是不是能立刻看得到我们更改后的样子 原生app就是你要更新一个东西的时候 你必须把你的软件包发到各个应用商店 
        //     等到用户去更新下载完成之后才能看到你更改后的样子 用户不更新的话看不到你更改后的样子 我们工作就白做了 为了解决这个问题 出现混合App 
        //     混合App是原生App和webApp相结合的出来的一个产物 为什么把这两个结合呢 因为在很多的时候 我们想我们的用户能立刻看得到我们更改后的样子 
        //     比如天猫上的商家都有后台 在添加商品详情的时候 它去更改一个照片或者更改一个文字 上架一个产品 我们用户是不是立刻看得到呢 是这样的
        //     我们不需要等到天猫这个软件整体更新后我们才能看到这个商家更新了 混合App就是在原生App里镶嵌了webApp 
        //     它可以把它一些不经常改动的地方用原生来做 经常改动的地方用web来做 所以才出现了混合App 这是它出现的理由 混合App这么好
        //     为什么还会有微信小程序的存在呢 混合App它虽然解决了原生App不能经常更新的问题 它是不是依然还很大 天猫/美团都是混合的App 它是不是很大 
        //     在某些地方是不是引入要等待它读条 如果是说手机内存不够了 没法下载App了 微信小程序的出现恰好是解决了这个问题 微信小程序很小 不需要下载
        //     最多只有两兆 如果超过两兆的话它是不会让你上线的  是不是所有的应用都适合做成一个小程呢 微信小程序适合哪类的应用呢 
        //     第一个是微信小程序适合停留时间不太长 打开频次比较低的应用 应用界的二八定律 每个手机应用基本上是指百分之二十的功能被百分之八十的人使用
        //     可以把百分之二十单一的功能抽取出来做成一个小程序
        //
        // 总结
        //    原生APP   优点: 流畅               缺点: 占用内存大 更新慢
        //    WebApp    优点: 占用内存小 随时更新 缺点: 等待时间长
        //    混合APP   缺点: 占用内存大
        //    小程序    优点: 占用内存小
        //
        //
        //
        // 小程序的代码跟我们正常写前端的代码是不一样的 它有自己的一套语言 wxml wxss这样的文件类型 
        //     它需要用我们的小程序下面的编辑器来写或者说我们小程序上运行的代码运行到的结果 只能在微信提供的开发者工具上面才能看得到 
        //     所以要下载开发者工具 还需要注册一个小程序的账号 有这样的账号才能拿得到这样的小程序的ID 
        //     我们用这个ID才能去写小程序并且上传我们的小程序的后台
        //
        //
        //
        //
        // 新建Page可以在app.json检测到 一个小程序所需要的页面都写到app.json 如果不写到这里面的话是找不到它的 刚刚新建的文件什么都没有的 所以报错
        //     写一个{}就可以了   Wxml相对于在谷歌浏览器里的Elements 它会把我们写的所有结构展现出来 唯一需要注意的一点是  
        //     我们把pages里面的index.wxml拿出来看看 为什么在Wxml里面有个page标签包裹着它 在html文件当中我们都有html根标签的 在小程序里是不用写的 
        //     它会自动的加上 打开Sources Source是我们引入的js文件 打开pages下面的index文件夹 为什么有两个index.js 正常下不是只有一个吗
        //     sm文件是我们自己写的文件 非sm文件是把我们自己写的文件编译后的文件 真正项目中引入的是编译后的文件 所以它为了做区别 
        //     把我们自己写的文件加上一个名字 Network是网络请求的一些东西 小程序中没有dom 所以说你不能去操作dom 所有的东西都是用数据实现的 
        //     你可以理解成小程序是由数据驱动的 我们所需要用到的东西都需要放到data的这个对象里面 appData里面是真正的值 Storage是缓存
        //     我们可以所需要的信息缓存到Storage当中 下次进来的时候信息还在 我们可以理解为缓存 前台是当你手机中的首屏 
        //     当前的手机页面打开的时候就是微信小程序的时候 微信小程序在前台 如果退出去返回 就是后台
        //
        //
        //
        //
        // project.config.json是项目配置 它是根据我们设置一些 拿这个项目拿到其他电脑上的时候打开微信开发者工具 
        //     它会根据自己的配置的这个文件去设置去你开发者工具用到的东西 是否检查 有了这个文件就不用自动去改 它自动帮我们改 我们不用过多去关心
        //     这四个文件是不可以更改的 你不能去更改他的名字 它代表的是全局的一个东西 app.js全局的逻辑行为 app.json全局的配置 
        //     它只有index页面和logs页面 如果你不把logs页面注册到这里的话 那操作的时候小程序就找不到这个页面 
        //     因为它就不知道了 你需要把它写在这里告诉它 我这里有个页面 你以后可能会用得到 pages/index/index就是小程序展现出来首页面
        //     wxml文件相对于html 它也是小程序骨架的一个语言 它就是写一些元素结构的 可以理解为html文件 它是小程序团队封装的一些组件
        //     wcss就是一个css文件 完全和css文件一样的 它支持CSS3 它只是名字不一样的 wxml文件没有引入任何文件 没有像html引入其他文件
        //     这个就是小程序的特点 你不用去写任何的链接  它都能去找得到 它能去文件夹中找它同名的一个文件 它需要js去找logo.js 找不到继续向上找
        //     可能知道app.wcss 找到同页面当中的wcss文件 这个是它的特点也是它的优点 你每个页面的名字都要和它文件夹的名字一样的 我们文件要同名的 
        //
    
    </script>

</body>
</html>