<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

    <script>

        // git的发展包括一些本地仓库语言一些仓库的搭建包括git账号的创建
        //
        // 
        // 集中式版本控制工具和分布式版本控制工具之间的差别
        // 集中式版本控制系统它更注重的是文件前后差异的对比 我们看看它这个文件到底变化在哪 哪怎么处理了 哪怎么变化了 它更关心更新前后差异的对比
        //     版本记录中会对那些更改的地方进行记录 这个是我们分布式的版本控制系统 它并不会保存这些更新信息 而是把那些更新的文件进行保存
        //     然后进行快照然后记录在系统当中 每个版本下面对应的都是快照的索引 然后指向同一个版本 这样的它的东西每个版本下都存在的都是一整套的文件
        //     都是对应不同版本下的一整套文件 SVN是集中化的版本控制系统 大家工作的时候首先要联网必须在同一服务器下进行工作进行开发
        //     但是一旦这个服务器出现问题 所有人都工作不了 包括不能提交代码 什么都不能做了 同时一旦这个服务器出现问题 
        //     我们的历史版本可能会涉及到丢失的问题 历史版本这么重要吗 因为一个东西它有个迭代的过程 从旧到新这个过程 
        //     可能说我们之前废弃的那些不用的东西可能在未来还会再使用 包括我们做新的项目的时候 我们原来项目废弃的地方我可以拿来复用
        //     或者感觉它如何如何好 这个时候历史版本对应我们来说就比较重要了 所以说它这个问题还是比较大的 git是分布式管理系统 什么是分布式 每个人 
        //     everyone它都是一个看作唯一的服务器 它们本地存储的是跟远程服务器当中存储的代码是一模一样的 你服务器存什么 我本地就存什么 它是一样的
        //     包括你可能说我这个A同事它上面的代码出现问题 我还有B同事和C同事 包括远程还有一个 这样的话我A同事出了问题 
        //     从B同事拷贝过来一份一模一样的完全可以使用只不过我修改的那些代码没有了而已 重写呗问题不大 但是你整个项目没有了 这个问题比较大了
        //     这个就是分布式版本控制系统它的一些优点 客户端存储的是原始代码的完整镜像 存储到本地 就是每个客户端的代码仓库都是一样的 
        //     就是只要有完整的一个就ok了 任何部分代码出现可以使用其他客户端进行修复 
        //     这个就是git的发展过程就是说集中式版本控制工具与分布式版本控制工具它们的一些差别
        //
        //
        // git里面的指令都是基于Linux的  $ li      右键会在当前文件夹下打开这个git bash here    mac笔记本可以直接在文件夹下打开终端
        //     $ git init  初始化本地的代码 形成本地仓库 这个里面git是隐藏文件 可以通过查看把隐藏项目点开就可以看到了 如果没选的话你是看不到的
        //     这里面就是关于本地仓库的一些配置信息 还有你各个版本信息都会存到这里 所以大家对这个.git文件不要乱改 一旦乱改的话本地仓库就会被破坏
        //     所以说知道这里面有这些东西就可以了 我们本地仓库有了 我们可以里面创建一些文件 写一些代码 创建一个项目 在里面进行一些使用
        //     本地仓库有了 难道说我们这些东西放本地吗 不 我们一定会有对应的远程仓库 它俩是一样的 远程仓库 -- GitHub / 码云
        //
        //
        // 点击+下的new repository开启一个新的项目 在GitHub的终端创建一个远程仓库 一般会用到一个README文件初始化我们这个项目 
        //     然后创建我们这个远程仓库 这已经建立完成我们远程的仓库 这个远程代码管理GitHub已经有账号 已经创建完项目了 我们本地有仓库 
        //     是不是它们之间建立一些关联了 这个时候就需要下面的过程 创建SSH密钥跟它进行配对 建立一定联系吧 你想给我推代码 或者你想对我做些什么 
        //     我们两应该有个互相的认证 互相的这个安全 它应该是通过这个密钥shh-Keygen进行这个认证 
        //     
        //     首先怎么生成SSH 这个密钥怎么生成呢 电脑屏幕下打开git bash hear指令  $ ssh-Keygen 这个时候就会在这个地方保存你的 
        //     默认的地方保存你的这个ssh 因为我本地有了 already exists. 已经存在 我们覆盖 正常来说我们应该删除
        //     我们这里直接覆盖 y 回车  这个时候我们可以看到   $ ls   $ cd .ssh当前下我们应该有个ssh文件 它是个隐藏文件 
        //     但是大家通过文件夹目录是可以看得到的 这个时候我们把这个id_rsa.pub拷贝出来 把当中这串字符我们复制一下 再回到我们的GitHub上
        //     然后点击我们头像下面有个Settings 然后有个SSH and GPG keys  delete原来的SSH    点击New SSH key  这个title可以记录一下是谁 
        //     我一般记录我的设备'mi' 把我们赋值的密钥粘贴过来 然后添加 点击Add SSH key    Never used ― Read/write 没有使用过的 这个完事之后 
        //     这个本地已经配好了 配好之后还有进行本地的环境配置 需要这些设置 $ git config --list 这个其实已经有的 这个时候配置一下 
        //     $ git config --global user.name 'cmh'   $ git config --global user.email 1457616378@qq.com 这个就是通过git  
        //     $ git config --list 可以看到下面你的一些配置 我们配置完这些之后我们本地仓库已经有了 我们远程仓库也有 那它们怎么联系到一起呢 
        //     先切回到我们这个项目这里 点击Your profile 点击我们的项目 这是我们远的仓库 点击Clone or download 复制一下这个地址 
        //     刚才我们在本地建立一个myProject文件 你怎么进行关联呢 在myProject下面打开 git bash here   $ git init  
        //     $ git remote add origin git@github.com:cxuhwiuefhuefu/myDemo.git 你的GitHub邮箱  对应的项目的地址 已经绑定成功
        //     因为对应Linux来说不报错就是最好的状态 这个我ok之后我们就可以进行下一部分的操作了 我们上传代码 提交代码 这个建立完之后简单写一个指令
        //     拉代码 $ git pull origin master  会把当前的MD文件跟我们这个远程仓库的README文件下到一起 同时产生关联 然后我们在里面操作
        //     然后对远程仓库进行一些详细操作 我们本地仓库修改代码 删除文件或者添加文件 然后对这个远程仓库 同样包括提交一些代码 让它帮我们存储 管理      
        
    </script>
    
</body>
</html>