<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

    <div></div>
    <script>
        
        // 数组和对象存储数据结构
        // 现在Set和Map存储数据结构 set.js -o set1.js

        // 转bebal  在cmd上npx babel

        // new Set(); // 和Promsie一样是浏览器内置的构造函数

        // 参数必须具备迭代接口   [] '' argument NodeList
        // 具备Symbol.iterator具备迭代接口的




        // -------------------------------------------------------------------------
        // let oS = new Set([1, 2, 4, [1, 2], true, {name: 'hehe'}]);
        // console.log(oS);


        // let oS2 = new Set('abcad');
        // console.log(oS2);


        // let oS = new Set([1]);
        // oS.add([1, 2]); // 在原型上的方法
        // oS.add(true);
        // // console.log(oS);
        // // oS.delete(1);
        // // oS.clear();
        // // console.log(oS.has(true));
        // oS.forEach(value => { // 遍历
        //     console.log(value);
        // })
        // for(var prop of oS) { // 具备迭代接口的都能遍历
        //     console.log(prop);
        // }


        
        
        // 数组转Set
        // let arr = [1, 2, 3];
        // let oS = new Set(arr);
        // console.log(oS);
        
        // Set转化为数组
        // 1. ... 
        // 2. Array.from(ES6规定数组的静态方法 它能把类数组以及具备迭代接口的数据转化为数组 包括argument)
        // console.log([...oS]); // 拓展运算符 拓展Set 可以拓展任何具备迭代接口的值
        // console.log(Array.from(oS));


        // // 字符串变成数组
        // var str = '1234';
        // console.log(Array.from(str));




        //------------------------------------------------------------------------------------------------------------------
        
        
        

        // let o = {
        //     name: 'hehe'
        // }
        // var arr = [1, 1, 2, 3, 3, 4, o, o, {name: 'cg'}];
        // var obj = {};
        // let newArr = [];
        // for(let i = 0; i < arr.length; i++) {
        //     if(!obj[arr[i]]) {
        //         newArr.push(arr[i]);
        //         obj[arr[i]] = true;
        //     }
        // };
        // console.log(newArr);    
        // // // 为什么会出现o
        // o[{}] = 10; // o[{}.toString()] = 10
        // console.log(o); 
        // o[{name: 'aaa'}] = 20; // o[{}.toString()] = 20
        // console.log(o);
            



        // let o = {
        //     name: 'hehe'
        // }
        // var arr = [1, 1, 2, 3, 3, 4, o, o, {name: 'cg'}];
        // var obj = {};
        // console.log(new Set(arr));
        // console.log([...new Set(arr)]);    
        // 通过这种方式 添加对象添加任何一种值通过Set方式都可以帮你完成去重操作 去重操作尽量使用它




        // 并集 交集和差集
        // 集合
        // arr obj set map都是集合


        // 取并集
        // let arr1 = [1, 2, 2, 3, 4];
        // let arr2 = [2, 3, 3, 4, 5];
        // let oS = new Set([...arr1, ...arr2]);
        // console.log(oS);
        // console.log([...oS]);


        // 交集
        // let arr1 = [1, 2, 2, 3, 4];
        // let arr2 = [2, 3, 3, 4, 5];
        // let oS1 = new Set(arr1);
        // let oS2 = new Set(arr2);
        // let newArr = [...oS1].filter(ele => {
        //     return oS2.has(ele);
        // });
        // console.log(newArr);
        

        // 差集
        // let arr1 = [1, 2, 2, 3, 4];
        // let arr2 = [2, 3, 3, 4, 5];
        // let oS1 = new Set(arr1);
        // let oS2 = new Set(arr2);
        // // let newArr1 = [...oS1].filter((ele) => {
        // //     return !oS2.has(ele);
        // // })
        // // let newArr2 = [...oS2].filter((ele) => {
        // //     return !oS1.has(ele);
        // // })
        // let newArr1 = [...oS1].filter(ele=>  !oS2.has(ele));
        // let newArr2 = [...oS2].filter(ele => !oS1.has(ele));
        // console.log([...newArr1, ...newArr2]);
        // 操作大量数据一般不在前端搞的 在后台搞的




        // ----------------------------------------------------------------------------------------------------
    
    


        // let oMp = new Map([['name', 'hehe'], ['age', 17], ['sex', true], [{}, '---']]);
        // console.log(oMp);

        


        // api
        // let oMp = new Map();
        // oMp.set('name', 'hehe');
        // oMp.set('age', 18);
        // oMp.set({}, '----');
        // oMp.set({}, '++++');
        // let obj = {};
        // oMp.set(obj, '??????');
        // // console.log(oMp);
        // // console.log(oMp.get('name'));
        // // console.log(oMp.get({})); // 取不了
        // // console.log(oMp.get(obj));
        // // oMp.delete('name');
        // // oMp.clear();
        // // console.log(oMp.size());
        // // console.log(oMp.keys());
        // // console.log(oMp.entries());
        // oMp.forEach((ele, key, self) => {
        //     console.log(ele, key, self);
        // })
        // for(let val of oMp) {
        //     console.log(val);
        // }
        // console.log(oMp.has('name'));




        //---------------------------------------------------------------------------------------------------------------




           
          
        // let node3 = {
        //     key: 'name',
        //     value: '3',
        //     next: null
        // }
        // let node2 = {
        //     key: 'name',
        //     value: '2',
        //     next: node3
        // }
        // let node1 = {
        //     key: 'name',
        //     value: '1',
        //     next: node2
        // }

        // hash算法的目的它要把不定范围的值转化为特定范围的值输出的
        // hash算法变成桶来用
        // 找对应的值比较高效的



        // ------------------------------------------------------------------------------------------------------------------




        // Map
        // 1. 不重复
        // 2. 字符串 对象 NaN null [] function(){} 10
        // 3. set  get delete has clear

        // let prop = 'name';
        // let obj = {
        //     [prop + 10]: 'hehe'
        // }    
        // console.log(obj);




        // function myMap() {
        //     this.bucketLength = 8;
        //     this.init();
        // }        
        // myMap.prototype.init = function() {
        //     // 初始化桶 桶 8
        //     this.bucket = new Array(this.bucketLength);
        //     for(var i = 0; i < this.bucket.length; i++) {
        //         this.bucket[i] = {
        //             type: 'bucket_' + i,
        //             next: null
        //         }
        //     }
        // }
        // // 1. [0, 8)
        // // 2. 
        // myMap.prototype.makeHash = function(key) {
        //     let hash = 0;
        //     // string number boolean null undefined NaN {} [] function(){}
        //     if(typeof key !== 'string') { // 保证不同的类型不同的hash   这种方式存的值过多 增加桶的长度
        //         if(typeof key === 'number') {
        //             // number   typeof NaN === number 
        //             hash = Object.is(key, NaN) ? 0 : key;
        //         }else if(typeof key === 'object') {
        //             // null {} []
        //             hash = 1;
        //         }else if(typeof key === 'boolean') {
        //             // true false boolean
        //             hash = Number(key);
        //         }else {
        //             // undefiend fucntion() {}
        //             hash = 2;
        //         }
        //     }else {
        //         // string
        //         // 'a' 'ab' 'anjkwbkjdwejk'
        //         // 长度大于等于3了 前三个字符 ascii 累加
        //         for(let i = 0; i < 3; i++) {
        //             hash += key[i] ? key[i].charCodeAt(0) : 0;
        //         }
        //     }
        //     return hash % 8 ;
        // }
        // myMap.prototype.set = function(key, value) {
        //     let hash = this.makeHash(key);
        //     let oTempBucket = this.bucket[hash];
        //     while(oTempBucket.next) {
        //         if(oTempBucket.next.key == key) {
        //             oTempBucket.next.value = value;
        //             return;
        //         }else {
        //             oTempBucket = oTempBucket.next;
        //         }
        //     };
        //     oTempBucket.next = {
        //         key: key,
        //         value: value,
        //         next: null
        //     };
        // }
        // myMap.prototype.get = function(key) {
        //     let hash = this.makeHash(key);
        //     let oTempBucket = this.bucket[hash];
        //     while(oTempBucket) {
        //         if(oTempBucket.key === key) {
        //             return oTempBucket.value;
        //         }else {
        //             oTempBucket = oTempBucket.next;
        //         }
        //     }
        //     return undefined;
        // }
        // myMap.prototype.delete = function() {
        //     let hash = this.makeHash(key);
        //     let oTempBucket = this.bucket[hash];
        //     while(oTempBucket.next) {
        //         if(oTempBucket.next.key === key) {
        //             oTempBucket.next = oTempBucket.next.next;
        //             return true;
        //         }else {
        //             oTempBucket = oTempBucket.next;
        //         }
        //     }
        //     return false;
        // }
        // myMap.prototype.has = function() {
        //     let hash = this.makeHash(key);
        //     let oTempBucket = this.bucket[hash];
        //     while(oTempBucket) {
        //         if(oTempBucket.next && oTempBucket.next.key == key) {
        //             return true;
        //         }else {
        //             oTempBucket = oTempBucket.next;
        //         }
        //     }
        //     return false;
        // }
        // myMap.prototype.clear = function() {
        //     this.init();
        // }
        // let oMp = new myMap();
        // let obj1 = {
        //     name: '++++++++++='
        // }
        // oMp.set('name1', 'hehe');
        // oMp.set('name2', 'haha');
        // oMp.set(obj1, '+++++');
        // oMp.set(obj1, '-----');
        // oMp.set({}, '---');
        // oMp.set(function() {}, true);

            

    </script>
    
</body>
</html>