<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <link rel="stylesheet" href="./test2.css">
</head>
<body>
    <div class="wrapper">
        <ul class="img-box">
            <li><a href="javascript:;"><img src="./img/1.jpg" alt=""></a></li> <!--取消跳转 -->
            <li><a href="javascript:;"><img src="./img/2.jpg" alt=""></a></li>
            <li><a href="javascript:;"><img src="./img/3.jpg" alt=""></a></li>
            <li><a href="javascript:;"><img src="./img/4.jpg" alt=""></a></li>
            <li><a href="javascript:;"><img src="./img/5.jpg" alt=""></a></li>
            <li><a href="javascript:;"><img src="./img/1.jpg" alt=""></a></li>
        </ul>
        <div class="btn">
            <a href="javascript:;" class="prevBtn"><i></i></a> <!-- 如果a标签引入background-image:; 会覆盖background-color -->
            <a href="javascript:;" class="nextBtn"><i></i></a>
        </div>
        <div class="order">
            <ul>
                <li class="item active"></li>
                <li class="item"></li>
                <li class="item"></li>
                <li class="item"></li>
                <li class="item"></li>
            </ul>
        </div>
    </div>
    <script src="./jquery.js"></script>
    <script src="./test2.js"></script>
</body>
</html>
/*************************************************************/
*{
    padding: 0;
    margin: 0;
    list-style: none;
    text-decoration: none;
    font-size: 0; 
}
.wrapper{
    position: relative;
    width: 520px;
    height: 280px;
    margin: 100px auto;
    /* border: 10px solid red; */
    overflow: hidden;
}
.img-box{
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;  
    width: 3120px;/* 宽度不设置默认继承父级的宽度 */
}
.img-box li{
    display: inline-block;
}
/******************************************************/
.btn{
    display: none;
    width: 100%;
    height: 0px;
    position: absolute;
    top: 50%;
    margin-top: -20px;
}
.btn .prevBtn, 
.btn .nextBtn{
    position: absolute;
    width: 15px;
    height: 24px;
    padding: 10px;  /* 用padding居中 */
    background-color: #333;
    opacity: 0.5;
}
.btn .prevBtn{
    left: 0;
}
.btn .nextBtn{
    right: 0;
}
.btn .prevBtn i,
.btn .nextBtn i{
    display: inline-block;
    width: 15px;
    height: 24px;
}
.btn .nextBtn i{
    background-image: url("./img/taobao.png");
    background-position: -200px -24px;
}
.btn .prevBtn i{
    background-image: url("./img/taobao.png"); /* 默认图片从左上角开始引入 */
    background-position: -200px 0;;
}
/* 节省性能: 雪碧图 要引入很多小图片,加载页面的时候要发送很多请求,每次请求都很浪费时间,图片是在服务器下的
   你要去请求这个资源,耗时,与其加载那么多图片,比如放在一个小图标里,只下载放在一个图片下,节省性能 */
.order{
    position: absolute;
    bottom: 50px;
    width: 100%;
    height: 14px;
    text-align: center;
}
.order ul{
    display: inline-block;
    background: rgba(100, 100, 100, 0.5);  /* 0-255(red) 0-255(green) 0-255(blue) 0-1(opacity)*/
    /* opacity: 0.5; */
    border-radius: 7px; 
}
.order ul li{
    display: inline-block;
    width: 10px;
    height: 10px;
    margin: 2px;
    border-radius: 50%;
    background: #fff;
    cursor: pointer;
}
/* 子元素会受到父元素opacity的影响  rgba不会影响子元素的*/
.order ul .active{
    background: #ff5000;
}
/*************************************************************************/


//   1.入口函数   绑定事件 定时器
//   2.绑定事件  鼠标进入的时候 1.display: blobk 2.停止运动 3.在进入btn上是可以运动的
//
//
//
var nowIndex = 0,
    w = $('.wrapper').width(),
    len = $('.item').length,
    slider_timer = undefined,
    flag = true;
function init() {
    bindEvent();
    slider_auto();
}

function bindEvent() {
    $('.prevBtn').add('.nextBtn').add($('.item')).on('click', function() {
        if($(this).attr('class') == 'prevBtn') {
            move('prev');
        }else if($(this).attr('class') == 'nextBtn'){
            move('next');
        }else {
            var index = $(this).index();
            move(index);
        }
        changeOrderStyle(nowIndex); // 每次点击都会执行这个函数
    })

    $('.wrapper')               // 事件冒泡  onmouseleave与onmouseover的区别: onmouseover会冒泡 onmouseleave不会冒泡
      .mouseenter(function() {
          $('.btn').css({display: 'block'});
          clearTimeout(slider_timer);
      })
      .mouseleave(function() {
          $('.btn').css({display: 'none'});          
          clearInterval(slider_timer);
          slider_auto();  // 鼠标点击小圆点瞬时hover  最好设置计时器之前清空计时器
      })

      $('.btn a').mouseover(function() {
          clearTimeout(slider_timer);
          slider_auto();
      })

}

function move(direction) {
    if (flag) {
        flag = false;
        var a = 1;
        if (direction == 'prev' || direction == 'next') {
            if (direction == 'prev') {
                if (nowIndex == 0) {
                    $('.img-box').css({ left: - (w * len) });
                    nowIndex = len - 1;
                } else {
                    nowIndex = nowIndex - 1;
                }
            }else {
                if (nowIndex == len - 1) { // 0 1 2 3 4 5
                    a = 0;
                    $('.img-box').animate({left: - (len * w)}, function() {
                        $('.img-box').css({left: 0});
                        clearTimeout(slider_timer);
                        slider_auto();
                        flag = true;
                    })
                    nowIndex = 0;
                   
                } else {
                    nowIndex = nowIndex + 1;
                }
            }
        }else {
            nowIndex = direction;
        }
        if(a == 1) {
            $('.img-box').animate({ left: -(w * nowIndex) }, function() {
                clearTimeout(slider_timer);
                slider_auto();
                flag = true;
            }); 
        }
    }
}

function changeOrderStyle(index) {
    $('.active').removeClass('active');
    $('.item').eq(index).addClass('active');
}

function slider_auto() {
    slider_timer = setTimeout(function() {
        move('next');
        changeOrderStyle(nowIndex);
    }, 1000)
}

init();

// 入口函数

// var oImg = new Image();  // 创建img最好用这个
// var oImg = document.createElement('img');

// 检测鼠标同时点击的事件,是检测鼠标左键和右键mousedown的时间差
//  XHR.onreadystatechange = function() {
//      if(this.readystate == 4 && this.status == 200) {
//          callback(this.reasponseText);
//      }else {
//          console.log('error');
//      }
//  }

// 不要用onload, onreadystatechange可以监听状态
// ajax用onreadystatechange
//

// 难点是hover 
// 
//  每次设置计时器前都要清除计时器
//  
//
// 
