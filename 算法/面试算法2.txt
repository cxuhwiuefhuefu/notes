<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
    <script>
        
        // 1. 一个整型数组里面除了两个数字之外 其他数字出现了偶数次 请写程序找出这两个只出现一次的数字
        // [3, 4, 1, 1, 3, 2, 5, 6, 5, 6, 6, 6]
        

            // indexOf lastIndexOf
            // 可以先去计数 遍历数组的坐标先去计数 看它出现了几次 把它的次数保存下来 看哪个出现了一次 怎么保存呢 可以用对象的方式 
            // 对象的属性是唯一的
            // {
            //     "3": 1,
            //     "4": 2
            // }
            // function appearOnce(arr) {
            //     var obj = {}; // 用来计数的 
            //     var result = []; // 返回的结果
            //     for(var i = 0; i < arr.length; i++) {
            //         if(obj[arr[i]]) {
            //             obj[arr[i]] ++;
            //         }else {
            //             obj[arr[i]] = 1;
            //         }
            //     }
            //     for(var prop in obj) {
            //         if(obj[prop] == 1) {
            //             result.push(prop);
            //         }
            //     }
            //     return result;
            // }
            // console.log(appearOnce([1, 2, 2, 3, 4, 4, 4, 4, 1, 7]));


            // 如果一个值只出现一次的话  那我从前面找从后面找 最后它的位置是不是唯一的  位置的结果是唯一的 
            //     indexOf(从前往后找) lastIndexOf(从后往前找)
            // function appearOnce(arr) {
            //     var result = [];
            //     for(var i = 0; i < arr.length; i++) {
            //         if(arr.indexOf(arr[i]) == arr.lastIndexOf(arr[i])) {
            //             result.push(arr[i]);
            //         }
            //     }
            //     return result;
            // }
            // console.log(appearOnce([1, 2, 2, 3, 4, 4, 4, 4, 1, 7]));
            



        // 2. 把第一道题的两个数字改成一个数字呢
        

            // 同或 异或
            // 逻辑运算方法： 与或非
            // &&： 并且 ==》 只有两个数都为1 它才是1 
            // 或： 或者 ==》 只要有一个1 它才是1
            // 非： 除了 ==》 非0即1 非1即0
            // 计算都要转化为二进制数 二进制数包括0 1    
            // 同或： 相同为1 ==》  0 0 -》 1   1 1 =》 1
            // 异或： 相反为1 ==》  0 1 -》 1   
            // 
            // 3 ^ 4 ^ 3 = 3 ^ 3 ^ 4 = 100    异或
            // 011 
            // 100
            // 111
            // 011
            // 100
            // 0 ^ 4 = 4
            // function test(arr) {
            //     var result = 0;
            //     for(var i = 0; i < arr.length; i++) {
            //         result ^= arr[i]
            //     }
            //     return result;
            // }
            // console.log(test([1, 2, 3, 3, 2, 1, 4]));




        // 3. 把一个数组最开始的若干个元素搬到数组的末尾 我们称之为数组的旋转 输入一个非减排序的数组的一个旋转 输出旋转数组的最小元素 
        //        例如数组{3, 4, 5, 1, 2}为{1, 2, 3, 4, 5}的一个旋转 改数组的最小值为1 NOTE:给出的所有元素都大于0 若数组大小为0
        //        请返回0
            
            
            // 求最小值 遍历 找最小的 
            // function searchMin(arr) {
            //     var min = arr[0];
            //     for(var i = 0; i < arr.length; i++) {
            //         if(min > arr[i]) {
            //             min = arr[i];
            //         }
            //     }
            //     return min;
            // }
            // console.log(searchMin([3, 4, 5, 1, 2]));


            // 二分法比
            // function test3(arr) {
            //     var mid = Math.floor(arr.length / 2);
            //     if(arr.length == 2) {
            //         return Math.min(arr[0], arr[1]);
            //     }
            //     if(arr[0] > arr[mid]) {
            //         var arr1 = arr.slice(0, mid + 1);
            //         return test3(arr1);
            //     }else {
            //         var arr1 = arr.slice(mid);
            //         return test3(arr1);
            //     }
            // }
            // console.log(test3([3, 3, 3, 1, 3]));

            // 相等还要进行进一步处理
            // [3, 3, 3, 1, 3]
            // [3, 3, 3, 3, 1, 3]

            // slice： 切分数组 算头不算尾 原数组是不变
            // splice: 改变原数组


            // 还有一种方法 先给它排序回去 再来找第零项就可以了




        // 4. 输入一个矩阵 按照从外向里以顺时针的顺序依次打印出每一个数字 例如 如果输入如下4 X 4矩阵: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
        //        则依次打印出数字 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
        // [
        //     [1,(row: 0 min, col: 0 min)  2,  3,  4], // row:0 min, col: 3 max
        //     [5,                          6,  7,  8],
        //     [9,                          10, 11, 12],
        //     [13,(row: 3 max, col: 0 min) 14, 15, 16] // row:3 max, col: 3 max
        // ]
        // 首先有个方向的问题 遇到拐点换方向 用坐标形式来写
        // 方向： 
        // 右: row + 0 col + 1
        // 下: row + 1 col + 0
        // 左: row + 0 col - 1
        // 上: row - 1 col + 0


        // [
        //     [1,  2,  3,  4],
        //     [5,  6,  7,  8],
        //     [9,  10, 11, 12],
        //     [13, 14, 15, 16]
        // ]


        // function printArr(arr) {    

        //     // 方向
        //     var direction = {
        //         'RIGHT': {
        //             // 行不变 列+1
        //             row: 0, 
        //             col: +1
        //         },
        //         'DOWN': {
        //             // 行+1 列不变
        //             row: +1,
        //             col: 0
        //         },
        //         'LEFT': {
        //             // 行不变 列-1
        //             row: 0,
        //             col: -1
        //         },
        //         'UP': {
        //             // 行-1 列不变
        //             row: -1,
        //             col: 0
        //         }
        //     }

        //     // 这四个拐点位置要找出来
        //     // 行数
        //     var rowLen = arr.length;
        //     // 列数
        //     var colLen = arr[0].length;
        //     // 最大行号
        //     var maxRow = arr.length - 1;
        //     // 最大列好
        //     var maxCol = arr[0].length - 1;
        //     // 最小行号
        //     var minRow = 0;
        //     // 最小列号
        //     var minCol = 0;
        //     // 返回结果
        //     var result = [];
        //     // 当前打印的位置
        //     var nowRow = 0;
        //     var nowCol = 0;
        //     // 当前方向
        //     var nowDirection = direction.RIGHT;


        //     // 判断特殊情况
        //     if(colLen == 1) {
        //         for(var i = 0; i < rowLen; i++) {
        //             result.push(arr[i][0]);
        //         }
        //         return result;
        //     }


        //     for(var i = 0; i < rowLen * colLen; i++) {
        //         result.push(arr[nowRow][nowCol]);
        //         // 下一次打印的位置
        //         nowRow = nowRow + nowDirection.row;
        //         nowCol = nowCol + nowDirection.col;

        //         // 判断右上角拐点
        //         if(nowDirection == direction.RIGHT && nowCol == maxCol && nowRow == minRow) {
        //             nowDirection = direction.DOWN;
        //         // 判断右下拐角
        //         }else if(nowDirection == direction.DOWN && nowCol == maxCol && nowRow == maxRow) {
        //             nowDirection = direction.LEFT;
        //         // 判断左下拐角
        //         }else if(nowDirection == direction.LEFT && nowCol == minCol && nowRow == maxRow) {
        //             nowDirection = direction.UP;
        //         // 判断左上拐点
        //         }else if(nowDirection == direction.UP && nowCol == minCol && nowRow == minRow) {
        //             nowDirection = direction.RIGHT;
        //         // 缩圈
        //         }else if(nowRow == minRow + 1 && nowCol == minCol) {
        //             minRow ++;
        //             minCol ++;
        //             maxRow --;
        //             maxCol --;
        //             nowDirection = direction.RIGHT;
        //         }

        //     }
        //     return result;
        // }
        // console.log(printArr([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]));
        // console.log(printArr([1, 2, 3, 4]));

        // console.log(printArr([[1], [2], [3]])); // 这种特殊情况会出错  
        // 不断转圈

        // console.log(printArr([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));
    
    
    </script>

</body>
</html>