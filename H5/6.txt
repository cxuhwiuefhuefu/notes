<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

    <audio src="./chengdu.mp3" controls preload="auto" loop preload="auto"></audio>
    <video src="./movie.mp4" width="300" height="400" controls poster="./bg.jpg"></video>

    <script>

        // 我们之前不是也能看视频吗 我们看的所有视频都是audio标签来做的吗 其实不是这样的 我们国内现在视频大部分的市场还是被flash所占据着 
        //     毕竟flash发展历史很悠长 它内部的东西做的很完善 而且会有很多flash插件针对flash来做的 所以国内的flash市场还是比较巨大 
        //     因为它有现成的完整的体系了 但是从去年开始 各个公司的视频已经在向video标签来倾斜 比如bilibili 去年已经将它视频播放转为默认情况是H5标签来播放
        //     当然可以由用户来选择 你是选择flash还是video 默认它会帮你用H5来播放 H5播放的一些好处是它不需要你flash插件 我们有时候在网上看一些视频
        //     你会发现放不了 他会提示你的flash插件过期 让你安装flash插件等等 flash其实用起来对用户来说有些麻烦 需要安装flash插件 所以就会有了video标签
        //     它用起来非常简洁 

        // 像国外大型的网站YouTube 一些视频播放也都普遍采用了video标签 当然video标签如果想占据大部分市场可能还有发展一段时间 
        //     毕竟浏览器支持的情况不一样 可能有些插件等等一些东西还需对它进行支持和兼容 但是有向video标签发展的趋势了 
        
        // 控制台有这个标签 为什么显示不出来?? 我们想正常在看一个视频或者看一些东西的时候 它会有一些默认的控件 比如说暂停/播放/进度条/小喇叭
        //     它都会有这些控件 audio标签默认给我们提供这样的控件 只不过在使用的时候要在标签当中把这个控件调出来 这个控件叫什么?? controls
        //     我看有些网站当中没有这些控件但是依然能进行播放 因为这样的控件的确音乐可能不太需要控件 需要控件会少些 如果不要控件我还能让它播放怎么办?? 也会有些属性
        //     autoplay: 自动播放 可以看出没有控件音乐可以自动播放的 我们其实看到所有的音乐这些效果都可以通过它的属性和方法以及一些事件进行控制
        //     比如你会有个小按钮 点击的时候这音乐就响起来了 但是你看不见控件那是我们点击的时候调用play方法 再点击给它暂停调用pause方法 
        //     当然controls和autoplay可以同时使用 有时候它没有显示总时长 因为有的时候资源在加载的过程中需要时间
        // 属性名等于属性值 就写一个单词
        // 元数据: 当前我这个资源拿过来了 资源它的时长是多少 时长多少是不是不需要我知道每一帧是什么样的内容 我依然可以拿到你的时长是多少 
        //            播放之前我可以拿到你这个时长 可以拿到比特率 帧的大小是多少这一类的这些参数 比如现在要对它进行播放 
        //            播放必须要知道一帧里面的数据是什么样子的 下一帧这个数据是什么样子的 是不是才能对它进行播放 那这些就不叫元数据 
        //            这些就叫视频加载的数据 视频播放时需要的数据 我们现在metadata加载只是元数据 并不是每一帧需要播放出来的内容是什么而所加载这个数据
        //            就每一帧所对应的数据这个我不需要 这个不叫元数据 再通俗的解释类似我们的图片 一张图片在没有把每一像素信息展示出来之前 
        //            我们是不是依然可以知道宽是多少高是多少 像这种它就叫元数据 那每一个像素上的图片信息应该是什么样子 这个是图片的数据 
        //            是每一像素的数据了 像这个就不叫元数据了
        // auto: 它会按照正常的矢量的内容来对它进行加载 当然也不是一下子全部帮你加载过来 这个不是auto auto只会加载一些元数据以及
        //           元数据之后的像当前这一帧的数据以及下一帧的数据这样类型的数据它会帮你加载出来一部分 当然也会根据你实际情况 
        //           可能是还没等加载出来就对它进行播放了 这个是autoplay 其实也没有加载多少 
        //           默认情况我们一般对它写个preload:autoplay让它自动加载一些资源就可以了
        // loop: 当前这个视频或者音频播放到最后了 是否回到第一帧重新进行播放    循环播放 相当于单曲循环了
        // autoplay controls preload loop在audio/video通用的
        // video: 默认情况下以你视频有多大拿这个video标签就有多大 当然可以给它来个高度/宽度来对它进行调整
        // poster: 只有video标签有 就类似于一个海报 那我们看一些视频的时候 最开始在你播放之前会给你展示出一张图片 可能这个图片写几个大字 学习资料 
        //             当你点击播放的时候里面真的是学习资料 当然也可能是一些其他的视频 其他视频是可能指一些动漫啊 或者一些电视剧等等这样的
        //             最开始播放之前可以添加一个海报 这个poster只有video标签有 因为video标签它才需要海报 音频标签不需要海报 
        //             在你播放之前这个视频会展示出来这个poster海报 当你点击播放的时候视频可以正常播放 这个poster在各个播放器中还不太一样
        //             比如你拿到移动端用这个video标签的时候可能在ios和andriod这两个展示的效果不一样 比如说你引一章视频首先不poster
        //             不poster就会取视频最开始的画面给你展示出来 
        //             这个是正常的状态 有的时候会因为你浏览器以及系统的原因 有的展示出来视频最开始的画面 有的呢这整块都黑了展示不出来了 
        //             这个时候为使它们的效果更统一的时候 一般我们在处理的时候会截第一屏的图片作为它的海报放在上面 你一点击播放的时候海报消失不见了
        //             这无论任何设备上面都能看到他们开始是统一的画面 不会导致有的时候有 有的时候没有 这开发的时候解决的小技巧 会截第一帧 
        //             第一帧什么样子 用poster把第一帧的图片引进来 在任何浏览器下你看到的都是一样的效果 不然有的就是黑屏的
        // ogg也是音频的格式 mp3 avi是视频格式   我们可以根据格式对它进行区分 如果支持mp3就播放mp3的文件 如果支持ogg的播放ogg的文件 
        //      后面会添加这个type只是帮助浏览器来识别当前这个资源的 这样的话浏览器能更快的识别这个是什么样的资源 当然不写这个也好使
        //
        //
        // 上面这几个属性直接放在标签上 实际开发中我们大部分需要通过js来操作的 所以看看脚本化内容
        //     脚本化怎么来操作它 首先你可以把标签写在这个页面上获取这个标签来对它进行操作 也可以动态的创建 动态的创建有两种形式 一个是createElement
        //     第二种是new什么东西 我们知道可以new Image()  创建一个img对象 同样new一个Audio 创建一个audio标签 但是你不能new一个video
        //     没有video这个构造函数 所以没办法通过new Video()创建这个video标签


    </script>

</body>
</html>


//***********************************************************************************************************************************************************************

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

    <script>

        var audio = new Audio('./chengdu.mp3'); // 这个src不一定在这里写
        // audio.src = './chengdu.mp3';
        audio.controls = true;
        audio.loop = 'loop';
        audio.preload = 'auto'; // 浏览器是否加载矢量的资源
        audio.autoplay = 'autoplay';
        document.body.appendChild(audio);   // preload自动帮我们添加了auto 一般开发中不会用到preload属性

        // 刚才添加到标签的属性我都可以通过js的形式来对它进行操作 标签里天生有的这些属性是特性 特性我可以通过点的操作来对这个对象来进行获取和调用
    

        // console.log(audio.currentSrc); // 为什么打印出来是空?? 执行肯定是执行了 首先它跟图片有些类似 图片加载的时候是异步加载的过程
                                          //     你加载这个图片是需要时间的 你先把这个图片塞到body当中 资源异步加载 那这个音频文件它也是会异步加载的 
                                          //     所以说我们想拿到这个音频文件它的地址的话 是不是要等到这个文件加载回来之后我才能获取到它 
                                          //     所以这块要来个事件 判断一下这个资源加载回来之后我们再对它进行播放 但是又有个地方需要注意了
                                          //     这个audio/video标签并没有onload属性 也就是说它根本没有加载完成 没有onload加载完成这个事件
                                          //     也就是说没有办法通过onload对它进行监听 我们可以通过window.onload window.onload代表这个资源全部加载完成
        window.onload = function() { // 当然这个资源其实不用全部加载完 后期会学些事件 比如说当元数据加载完成之后也会有个事件
                                     //     但播放的音频当前这个数据加载完之后也会有个事件 不一定是window.onlaod  你打印加载资源路径这块是乱码没关系
                                     //     可以对它进行解码 
            console.log(audio.currentSrc);
        }                               
        // 控件在各个浏览器上看起来的样子不一样 控件的样式是由各个浏览器实现的 所以它不一样 但是无论是什么样子的 我们基本上没见它用过默认样式 
        //     因为这个默认样式比较丑 就像好多button按钮 我们同样是要点击实现button按钮 但是基本上不太会button那个默认的样式 一般都会自己
        //     可以拿个a标签或者可以拿个div标签或者什么标签来对它进行替代了 自己写个样式                   

    </script>

</body>
</html>


//************************************************************************************************************************************************************************

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>

        #ad{
            width: 100px;
            height: 100px;
            display: none;
            background: orange;
        }
    
    </style>
</head>
<body>

    <button id="play">play</button>
    <button id="pause">pause</button>
    <button id="load">reload</button>
    <button id="down">-</button>
    <button id="up">+</button>
    <button id="quk">快进</button>

    <button id="or">play/pause</button>
    <div id="ad"></div>
    <script>

        var audio = new Audio(); 
        audio.src = './chengdu.mp3';
        audio.controls = true;
        audio.loop = 'loop';
        audio.preload = 'auto'; 
        audio.autoplay = 'autoplay';

        document.body.appendChild(audio);   

        play.onclick = function() {
            audio.play();
            // ad.style.display = 'none';
        }
        pause.onclick = function() {
            audio.pause();
            // ad.style.display = 'block';
        }
        
        // load()方法: 相当于我们播视频的那个重播的功能        
        load.onclick = function() {
            audio.load();
            console.log(11);
        }



        // muted: 恢复原来的状态 不静音的时候就恢复到原来的状态 原来设置那个值是什么就回到那儿去了

        // down.onclick = function() { // 为什么差的值不太规律??  因为js的操作对于数据来说它没有浮点数这一说 它不像C有int 还有些浮点数 
        //                             //     它对于这些数据的处理并不是很精准 所以我们在做+/-的时候不要想当然 一定要对这块进行处理
        //                             //     每次你先给它乘以一个10再取整 上下取整或者四舍五入取整完之后再除以10就可以把后面这个的值把它去掉了
        //                             //     后面这个值不会偏差很大 偏差很小很小
        //     if(audio.volume >= 0.1) {
        //         audio.volume -= 0.1;
        //     }else {
        //         audio.volume = 0;
        //     }
        //     console.log(audio.volume);
        // }
        // up.onclick = function() {
        //     if(audio.volume <= 0.9) {
        //         audio.volume += 0.1;
        //     }else { 
        //         audio.volume = 1;
        //     }
        // }


        // playbackRate: 像我们之前看的VCD有回放的功能 但现在播放那些视频没有播放了 一般我们拖着进度条了 托着进度条给它拖回来了
        //                   这个回放各个浏览器当中也不支持回放功能 即使把这个playbackRate这个值设置成负的 浏览器也不支持
        //                   0.4没声音了 当播放速度降到一定值的时候 它认为降到一定值了 已经影响我们正常听的效率 这个时候你就听不到声音了
        //                   因为它不符合正常人的听力范围了 这个时候就让你听不到了 当你把这个值超出 比如你设置10 
        //                   由于快到一定程度也超过我们听正常声音的一个频率了
        //                   那我们现在也就听不到了 一般会有个正常的范围 一般试的时候给这个范围 



        down.onclick = function() { // 这些判断没有用了 因为它超出这个范围也不会有什么问题 它没有规定超出这个范围会报错 所以这个地方不用进行判断
            audio.playbackRate -= 0.1;
        }
        up.onclick = function() {
            audio.playbackRate += 0.1;
        }
        // < 0.4  && > 4 听不到了       
        // 负值不能进行回放 还在进行播放着 所以浏览器暂时不支持视频回放的功能 当然各个浏览器实现的会有差别 可能有的浏览器觉得你这个回放还有用给你留着
        //     但大部分浏览器已经不支持这个属性 因为它没有实际太大的用处 如果用户想进行回放的话 可以往会拖进度条划一下就过去了


        // 快进的功能 --- currentTime
        quk.onclick = function() {
            audio.currentTime += 10;
        }
        // 其实很多时候 因为控件不想用它的 想自己做 那这个时候会有个滚动的进度条的 你有这个进度条给人家显示出来当前这个进度条这个时长是多少
        //     所以你要获取一下duration 获取一下总时长 比如你设置一个小div 它的宽度是328px 328px代表总时长 当你播放到1分58秒的时候 
        //     你当前这个小圆点应该挪到什么位置上 left的值是不是挪到117的位置上 你给这个小圆点left设置117px 就是通过这种方式来做的
        //     可以根据它这个宽度值来对应出这个时间是多少从而定位小圆点的位置



        // played: 为什么说时间段呢??  
        //    因为你看一个视频的话 不一定非得从头挨着看到尾 有可能中间你觉得这个片段不是很喜欢 这个女明星/男明星不是你的喜欢的明星 所以不是你这个爱豆 
        //        那这个时候你可能跳过了 所以你直接跳过 你直接看了下一段 用played可以返回出来你已经真真实实看过的时间段 而且看过的时间段的时候
        //        这个时间段是从哪一秒开始看的 在这个时间段内你看到了哪一秒 它都能给你返回出来
        //        start()传第几段开始的时间 end()第几段结束的时间       
        //
        // buffered: 正常来说的话 如果中规中矩来看的话缓冲的话可能从头到尾进行缓冲 但有时候你有可能在这看了一段 又在下边看了一段
        //               下边看了一段有可能就会直接从下一段开始缓存了 缓存的话缓存多段来了 那每一段从什么地方缓存到了哪都可以给你返回出来
        //               那我们可以buffered可以做缓存进度条的那种 比如说它从头缓存到尾的话 那么缓存很简单 我直接取end(0)就可以了 
        //               因为start(0)从0开始缓存的 song.buffered.end(0)获取一下当前缓存了多长时间 但如果你是中间缓存了 
        //               你把这个end() - start()获取时间 你拿到 缓存的时长/总的时长 乘以100%上下取整 这样的话可以拿到一个百分比 这个做的是缓存一段的时间
        //               你也可以做缓存几段的 缓存阶段的时候它给你返回给你的对象中有length属性 可以对它进行for循环 循环遍历第一遍的时候把第一段缓存东西给你展示出来了
        //               循环遍历第二段的时候再用第二段buffered.end(1) - buffered.start(1)第二段缓存的时间取得  每段减完的时间/总时长 ==》缓存比
        //               因为当前是本地的资源 它缓存的很快  它只缓存出来了一段
        // seekable: 比如从0秒缓存到100秒 100秒之内用户都可以进行跳转 有的地方缓存不一样 在另外一个地方有缓存 用户也可以跳转 



        or.onclick = function() { // 暂停和播放合成一个了 
            if(audio.paused) {
                audio.play();
            }else {
                audio.pause();
            }
        }


        // 什么叫调到一个新的播放点??
        //     比如当前在2的位置上拖到这里来了 是不是由2调到seeking06秒 调到一个新的播放点 这就是调试到新的播放点 
        //     当它监听用户调到一个新的播放点的时候 我们可以让它做点什么      
        // seeking 属性为true 说明播放器调到一个新的播放点
        audio.onseeking = function() { // 整个调整的过程中播放点都在变化 你会发现一旦进行拖拽的话 它都会进行播放 
                                       //     当你在调试新的播放点会对它进行播放
            console.log(888);
        }


        // pause(): 一般情况下暂停我们一般会对它进行什么操作呢 除了把资源暂停之外是不是有的时候它暂停我希望给它弹出一个广告 显示什么牛奶 
        //              你一点击暂停的时候 你把display: block   你再点击播放的时候display: none
        // 比如当前我们这个视频播放到最后了 我们是不是可以判断一下是不是要进行播放下一首啊 或者说已经到最后的话可以进行判断
        //     判断一下你到最后是否要给你进行提示 或者说我是否自动的帮你播放下一集

        // canPlayType()方法其实跟source标签有异曲同工之处 主要是为了进行兼容的 它看一下你是否支持mp3的格式 如果支持的话它加载mp3格式进行播放
        //       如果你不支持mp3格式的话 那可以再进行判断你是否支持ogg格式 你支持ogg格式那就帮你加载ogg格式的



        // play事件 当音频或者视频播放了就会触发Play的方法  --- 劣质的小广告
        // audio.onplay = function() {
        //     ad.style.display = 'none';
        // }
        // audio.onpause = function() {
        //     ad.style.display = 'block';
        // }


        // loadeddata加载到某一帧的详细信息  loadmetadata:加载元数据的时候会触发  
        // loadeddata/loadmetadata他们两个哪个会先触发呢?? 
        //     loadmetadata会先触发 为什么metadata会先触发 因为medadata是元数据 元数据会先加载的 后加载每一帧的详细数据的 所以元数据先触发的
        //                          
        audio.onloadedmetadata = function() {
            console.log('metadata')
        }
        audio.onloadeddata = function() {
            console.log('loadeddata');
        }
        audio.onended = function() { // 一般会问你是否进行下一集 或者自动帮你下一集的播放
            ad.style.display = 'block';
        }


        // 4可以进行播放 其他可能播放不出来 一般readyState状态一般都想要个最后的状态
        // 请求一个用户地理位置信息的值

    </script>

</body>
</html>	
