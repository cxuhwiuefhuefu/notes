<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
    <script>
        
        // 数组扁平化
        // 一般用在数组和对象
        // 数组扁平化是指深度很深的对象经过扁平化变成一层 也就是深度为1的对象
        // 数组扁平化是降维过程 是多维数组经过扁平化变成一维的数组



        var arr = [1, 2, [3, [4, 5], {}, null], [[[6]], 'hehe']];
        function isArray(obj) {
            return Object.prototype.toString.call(obj) == '[object Array]';
        }
        function isObject(obj) {
            return Object.prototype.toString.call(obj) == '[object Object]';
        }
        // 这两个函数可以用一个函数来写   偏函数？？

        function flatten(arr) {
            var arr = arr || [],
                resArr = [],
                len = arr.length;
            for(var i = 0; i < len; i++) {
                if(isArray(arr[i])) {
                    resArr = resArr.concat(flatten(arr[i])); // 唯一不是一维的数组 给它降维 concat方法不会改变原始数组 会生成新的数组
                }else {
                    resArr.push(arr[i]);
                }
            }    
            return resArr;    
        }
        



        // 写在原型上 不会把数组暴漏在外面
        Array.prototype.flatten = function() {
            var resArr = [];
            this.forEach(function(item) {
                // isArray(item) ? resArr = resArr.concat(item.flatten()) : resArr.push(item);
                Object.prototype.toString.call(item) == '[object Array]' ? resArr = resArr.concat(item.flatten()) : resArr.push(item);
            })
            return resArr;
        }
        arr.flatten();

        // 数组遍历 map forEach 区别在于一个会返回结果 一个不会返回结果




        function flatten1(arr) {
            var arr = arr || [];
            return arr.reduce(function(prev, next) {
                return Object.prototype.toString.call(next) === '[object Array]'? prev.concat(flatten1(next)) : prev.concat(next);
            }, [])
        }    
        // Array.prototype.reduce(cb, init); // init: 数组第一位
        // function cb(prev, next, index, arr); // 上一次数组返回的结果 下一位    




        const flatten2 = arr => arr.reduce((prev, next) => Object.prototype.toString.call(next) === '[object Array]'? prev.concat(flatten1(next)) : prev.concat(next), []);
    
    
    
    </script>

</body>
</html>