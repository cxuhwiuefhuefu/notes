<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

    <script>
        
        // 前端框架是什么
        //     前端框架是一套解决方案 它有特殊的规则去书写代码 你书写代码更加高效 更加便捷 以及代码运行起来更加高效
        //
        //
        // 为什么需要前端框架 因为原生JS无法满足我们日益增长的需求的 深层次的原因是 前端框架解决什么问题了 
        //
        //
        //前端框架特点：
        //        都基于组件化
        //        都有一个强大的社区
        //        都有很多的第三方库可以解决很多问题
        //        都有成熟第三方组件库
        //        都有浏览器插件可以debugging
        //        都对单页面应用很友好


        // 为什么要使用前端框架 底层原因是什么
        // 以前用原生JS也好用jQuery也好很难保持UI和状态同步 用前端框架去写可以保持UI和状态同步
        //     UI是什么 UI是你呈现给用户的东西叫UI层面 用户可以看到UI层面的东西 
        //     状态是什么 我们一般从后台获取数据 我们把数据展示给用户看 那这个数据就是状态 数据改变了 呈现给用户看的东西就不一样了 
        //     如果用户在UI层里也就是它能看到的层面去点击一个按钮或者去输入一个东西 我们数据是不是也要去改变 那这个就要求UI和状态同步
        //         但是以前用原生JS和jQuery去书写代码保持这两者同步是很困难的 所以前端框架出现了 


        // 用原生实现的问题
        //     用JS代码去创建UI可读性很差 在很多地方都定义UI了 如果你想让你的代码可读性很高 很整洁的话 先把UI层面的代码写到一起 
        //         先把数据层面的东西写在一起 这样的话 你的代码看起来很舒服了 我们可以用模板引擎去解决这个问题 但是模板引擎有性能的问题  
        //     最大的问题是状态改变的时候需要手动更新视图层 状态就是数据的改变在这个例子里面 状态逻辑的代码很少 UI逻辑的代码很多 
        //         也就是说我们数据状态的改变很简单的 但是我们UI的代码是很长 代码很长会导致你的出错的可能性是不是很多 感觉很脆弱 
        //         一旦你UI层面的代码出现会导致你当前这个页面崩掉了 因为都是bug 我们前端框架就是解决这个手动更新试图的问题 
        //         像我们react/angular/vue也好 你用它们之后它们就会自动的去更更新视图 你只需要管理好你的状态 管理好你的数据就可以了 
        //         视图的添加视图的删除全都交给我们前端框架去完成了 
        //     这就是我们为什么使用前端框架的原因 因为前端框架保 持UI和状态同步 你只需要管理你的数据和状态就可以了 
        //         我们UI层面的东西全都交给我们的前端框架来做 你用原生JS去写代码你保持UI和状态同步是很困难的 一旦我们数据改变了
        //         是不是我们也要写相应的代码让我们的UI层面去改变 数据改变只需要两行代码 但是UI层面改变需要十一行代码 
        //         这就导致我们代码出现的可能性很高 我们的代码的可读性很差 如果你的工作量大的话 全篇都是关于UI的操作 并且很容易出错
        



        // 三大主流框架的对比
        //
        // angular
        // 优点         MVVM模式  ==》 (导致我们UI和状态同步 因为我们不需要手动去更新视图了 我们angular自动去更新视图
        //                              我们只需要管理好我们的数据就可以了)
        //             双向数据绑定 ==》 (我们数据点变化了 我们视图也跟跟着变化了 反过来用户去改变了视图层 我们数据是不是也跟着改变
        //                                这就是双向数据绑定 如果有双向数据绑定的话 做一些复杂的开发就很容易了 像更新菜单就容易了)
        //             依赖注入 ==》 (依赖注入可以让我们组件和组件之间的耦合性降低 那我的代码可读性增高了) 
        // 缺点        语法复杂 ==》 (angular5使用TypeSript typescript是JavaScript的超级 这就导致我们想用angular5你必须学typescript
        //                           这就增加我们的学习成本)
        //             没有向后兼容 ==》 (angular1.0是比较早的时代 它主要解决PC端的用户 那我们现在也解决移动端的业务 
        //                               PC端的框架对于我们移动端来说比较大了 所以谷歌团队开发了2.0 但是angular2.0 和angular1.0是不兼容的 
        //                               angular1.0的项目如果你要用angular2.0来写的话必须重构 这样导致angular1.0的热度无法延迟到angular2.0的
        //                               你可以理解成angular1.0和angular2.0是两个框架 如果你去搜索的话你会发现我们用angularJs去指代angular1.0
        //                               angular是angular2.0及以后的版本 因为2.0以后的版本就兼容了)
        //
        //
        // react
        // 优点   虚拟DOM  ==》  (我们知道如果我们去操作dom的话 我们的性能是很低 需要重排和重绘 那我们知道JS引擎渲染速度是很快的 我们有V8引擎 
        //                       如果我们可以用JS指代DOM节点 这样我们的性能可以大大增加了 虚拟DOM就是做这个事情了)
        //        更加轻量  ==》 (它比我们angular更加轻)
        //        JSX语法 ==》 (JSX语法就是可以让你用js去写html和css 我们的html和css都写在js里面 如果你写习惯的话 你写出的代码会非常非常漂亮)
        // 缺点   官方文档没有体系化 ==》 (如果你想去学习react的话 打开react官网 但是react官网写的是很晦涩的  没有循序渐进的过程
        //                               它第一点就提到了组件 这就是没有体系化不好的地方)
        //        JSX语法  ==》 (你写习惯是非常漂亮的 但是你刚开始去学的话 它的学习成本无疑加大了 因为你需要 熟悉在js里面去写html和css)
        //
        //
        // vue
        // 优点  使用HTML模板
        //       详细文档并且中文化
        //       30kb ==》 库非常小的
        // 缺点  社区相对于不健全
        //       缺乏大型项目的实践

    
    </script>
    
</body>
</html>