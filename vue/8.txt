<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        
     
    
    </style>
</head>
<body>
    
        <div id="app">
          
        </div>   
            
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
        <script>

            // Vue-CLI3是vue的脚手架工具 可以让我们快速的构建除vue的项目
            // 在真实的开发中我们需要用到很多的开发工具 这些开发工具可以让我们的开发效率提高的很快 下面了解一下我们需要哪些开发工具
            //     首先需要一个服务器 叫做开发服务器  开发服务器有什么用呢   最好开一个服务器 把我们html代码扔到上面去 
            //     这个时候我们就可以通过http或者https去访问我的代码了 模拟我们真实的浏览环境 第二可能使用babel这个工具 
            //     这个工具可以把我们ES6的语法转换成ES5的语法 因为我们在开发过程经常使用ES6的语法 可以让我们开发更加高效更加便捷
            //     如果你用ES6的语法去开发一定把它转换成ES5的语法再传到真实的服务器上 因为我们ES6是15年6月分布的 15之前的浏览器百分之八用不了ES6的 
            //     用不了就会损失用户 你用ES6开发但是传到服务器上一定是ES5的语法 这样的话不管是15年前的浏览器还是15年后的浏览器都可以进行访问了
            //     第三个我们可能使用postcss less sass posecss是后处理器 less sass是预处理器 less和sass可以让我们当前的css和js写法一样 
            //     可以有变量/函数 因为我们css虽然叫一门语言 但是它写起来很死板 就是一个选择器后面加一些属性 
            //     但是如果你加上一些变量一些函数如果让我们的css写起来更加灵活 less和sass其实很有必要 可以让你开发更加高效 第四个esLint就是代码规范 
            //     它可以规范你的代码 它在我们开发过程中一般我们都是协作开发 可能我们很多人 去开发同一个项目 但是你一个规范 我一个规范 我写一个代码
            //     你写一个代码 这样可读性很差 怎么办 可以用这个代码规范  可能每个公司都有自己不同的代码规范 但是格式没有按照代码规范就报错 不是语法错误
            //     是格式错误 你可以把这些工具一个一个引入进来 但是我们配置这些可能配置一天可能没配置出来 自己写的话是不是得不偿失 有个前端构建工具叫做Weback/Gulp
            //     它可以通过npm的方式把这些工具全部引入进来 这些把开发工具启动了 这样的话我们是不是只需要学习vu就好了 知道webpack如何配置的 
            //     知道如何把当前的插件引入进来就可以了 假如我们去写vue的话 是不是可以通过webpack把当前的这些工具全部引入进来 是不是也很麻烦 
            //     你是不是得知道如何去配置我们的webpack 写一个webpack配置文件 也是一个很麻烦的一件事情 VUE CLI3就是把这些活交给我们脚手架去做
            //     你写一个命令就可以生成一个项目 这个项目webpack配置好 剩下的插件下载完了 是不是更加方便了 这个就是我们的脚手架  现在是3.0版本
            //     后面可能提到2.0版本  
            //     
            //     看一下怎么安装它  node大于8.9版本可以使用 $ node -v查看版本    $ npm install -g @vue/cli
            //         $ vue --version看一下版本号  如果是3.0的版本 说明它是正常了 如果你以前安装vue-cli2.0的版本 你应该先把它删除掉
            //         怎么删除呢 $ npm uninstall vue-cli -g     vue create vue-test创建一个项目 大写就不合法了 按空格取消或确定
            //         按照默认的来   vue create vue2 回车 如果你想快速创建一个项目的话 一回车就可以 因为我们当前创建的项目和之前的项目是一样的
            //         $ cd vue-test/      $ npm run serve 启动我们当前这个项目
            //
            // 在packjson里面可以看到serve 运行serve就是去开一个服务器 运行build就是把我们当前的代码进行一个打包压缩
            //      因为最终写好代码之后要进行打包压缩最后才上传到我们的服务器上 这个lint就是看我们的代码是不是有问题
            //       dependencies就是我们运行时的依赖 我们写的这个项目是vue的项目 我们这个项目跑起来依赖我的vue devDependencies就是我们开发时候的依赖
            //       在我们开发过程需要使用babel 需要使用eslint 需要使用compiler编译我们的vue  那这个就是我们的说明书
            // node-modules这个文件夹就是放我们所有包的地方 因为我们vue也好babel都需要去下载 下载的东西全部放在这里 public就是我们的html地方
            //     src就是我们正式写代码的地方  在main.js中它会把我们的vue引入进来 通过ES6这种模块化的方式 因为npm下载就可以把它引入进来
            // .browserslistrc就是我们浏览器的配置文件 它要去我们当前的浏览器大于1% 是最近的两个版本 不是ie小于等于8 这个是什么意思呢 
            //     在我们这些工具不管是babel也好postcssrc.js 它都是对我们的一个兼容性问题进行一个处理 那我是不是得告诉它对哪些浏览器进行处理
            //     你需要对大于百分之一的浏览器并且在最近的两个版本的浏览器进行处理 假如我们的浏览器市场份儿等于0.01% 就不需要管这个浏览器了
            //     不需要考虑浏览器的这个兼容性问题了 这个是浏览器兼容性问题的配置
            // eslintrc.js 我们刚才写的代码规范的配置项目
            // gitignore就是我们想把我们的项目上传到git上面去的时候 你可能需要忽略一些文件夹 像我们node_modules这个文件夹我们就不想上传到我们的github或者gitlab这种远程仓库
            //    就把它写在这 node_modules在第二行 就不会上传我们的node_modules 
            // postrcssrc是后处理器的一些配置 
            // babel.config.js 是Babel的一些配置 这是配置项
            //



        </script>
           

</body>
</html>