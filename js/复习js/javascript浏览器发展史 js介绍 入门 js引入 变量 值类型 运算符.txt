<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
</head>
<body>
	
	<script>
		
		// javaScript浏览器发展史
		
		// web发展史
		// Mosaic, 是互联网历史上第一个获普遍使用和能够显示图片的网页浏览器. 于1993年问世
		
		// 1994年4月, 马克.安德森和Silicon Graphics(简称为SGI, 中译为"视觉科技"或"硅谷")公司的创始人吉姆.克拉克(Jim Clark)
		//      在美国加州设立了"Mosaic Communication Corporation".
		// Mosica公司成立后, 由于伊利诺伊大学拥有Mosaic的商标权, 且伊利诺伊大学已将技术转让给Spy Glass公司, 开发团队必须彻底重新撰写浏览器程式码
		//     且浏览器名称更改为Netscape Navigator, 公司名字于1994年11月改名为"Netscape Communication Coporation", 此后沿用至今, 中译为网景。
		// 微软的Internet Explorer及Mozilla Firefox等, 其早期版本皆以Mosaic为基础而开发.微软随后买下Spy Glass浏览器, 而Mozilla Firefox则是
		//      网景通信家开放源代码后衍生出的版本。
	
	    // js历史
		// javaScript作为Netscape Navigator浏览器的一部分首次出现在1996年。 它最初的设计目标是改善网页的用户体验
		// 作者: Brendan Eich
		// 期初javascript被命名为LiveScript, 后因和Sun公司合作, 因市场宣传需要改名JavaScript。 后来Sun公司被Oracle收购，
		//     JavaScript版权归Oricle所有
		
		// 浏览器组成
		// 1.shell部分   (用户能操作的部分  设置 二维码....)
		// 2.内核部分     (代码)
		//       渲染引擎(语法规则和渲染)    HTML CSS这些基础语法的识别 以及浏览器怎么绘制这个页面 让它更高效的绘制 主要绘制部分
		//       js引擎  (马达)
		//       其他模块 (负责异步....)

		// 浏览器帧频 16毫秒 更新浏览器的状态
		// JavaScript引擎 --》 用C写的
		// JavaScriptV8 --》 用C++写的
		// 之前所有的东西由渲染引擎负责 负责的东西过多 写20行代码基本崩溃了 运行不出  现在提升到万行

		// js引擎
		// 2001年发布IE6, 首次实现对js引擎的优化
		// 2008年Google发布更新浏览器Chrome, 它是采用优化后的JavaScript引擎, 引擎代号V8, 因能把js代码直接转化为机械码来执行,进而以速度快而闻名
		// 后Firefox也推出了具备强大功能的js引擎
		// Firefox3.5 TraceMonkey (对频繁执行的代码做了路径优化)
		// Firefox4.0 JeagerMonkey

		// js逼格
		// 解释性语言 -- (不需要编译成文件)跨平台
		// 单线程 异步(一个执行体同一时间内干一件事)      多线程  同步(一个执行体同一时间干多件事)
		// ECMA标注 -- 为了取得技术优势, 微软推出了Jscript, CEnvi推出ScriptEase, 与JavaScript同样可在浏览器上运行。 为了统一规格
		//             JavaScript兼容于ECMA标准, 因此也称为ECMAScript。

		// 编译 C C++
		// 优点: 快
		// 不足: 移植不好(不能跨平台)

		// (oak)java --> javac --> 编译 --> .class文件 --> jvm(虚拟机) --> 解释编译            可以跨平台

		// 解释 javaScript php (解释一行执行一行)
		// 优点: 跨平台
		// 缺点: 稍微慢


		// JavaScript
		//    ECMAscript(原生)
		//    DOM
		//    DOM

		// js执行队列
		// js执行主线程
		//        task1,1ms <-- task2,2ms <-- task2,2ms <-- task1,1ms <--  task1,1ms <--  task2,1ms 
		// 把任务1以毫秒/微秒单位去切成无数个片段 把任务2切成无数个判断 然后把这些片段排成一个队列 随意排 按概率 看谁能抢到
		//     一个片段一个片段往javaScript引擎上送  JavaScript以一个时间片段为一个基准单位去执行这个时间片段 然后把
		//     把任务1和任务2按时间片执行完 
		// 争抢时间片

		//*************************************************************************************************************

		// 主流浏览器  内核
		// IE         trident
		// Chrome     Webkit/blink
		// fireFox    Gecko
		// Opera      presto
		// Safari     webkit (UC的内核)

		// 1. 有一定的市场份额, 大于3%左右
		// 2. 有独立研发的内核

		// 如何引入js
		//     1. 页面内嵌标签  // 可写在head里面或者body里面
		//     2. 外部引入
		//        为符合web标准(W3C标准的一项)结构 样式 行为 相分离 通常会采用外部引入  ==》 结构清晰 好维护

		// 写script当做储存数据的过程  <script type="text/tpl">故意让它运行不了 只能当做库存来用
		// 当1 2存在的时候 外部的好使
	    // window9.8只能后缀名为最多3位

		// js基本语法
		// 变量 (存放数据  以便后续使用)
		//    变量声明
		//        声明 赋值分解
		//        单一var
		//     命名规则
		//         变量名必须英文字母 __ $开头
		//         变量名可以包括英文字母 __ $ 数字
		//         不可以用系统的关键字(特殊语法含义的词) 保留字(系统时刻更新 未来可能用) 作为变量名

		// HTML CSS准确不叫编程语言 编程语言必须有个特点: 有变量名 函数 数据结构 可以进行基本的运算
		//      这才叫编程语言 HTMLCSS顶多叫脚本语言(计算机语言的一个小门类) 作为编程语言最基础一点有变量

		// var a = 10,
		//     b = 20,
		// 	c = 30,
		// 	d;
		// document.write(a, b, c, d);	
		
		// 数字的变量仿计算机的变量

		// var a = 10;
		// var b = 20;
		// var c;
		// c = a + b;

		// 基本语法
	    // 	值类型 -- 数据类型
		//        不可改变的原始值 栈数据
		//            Number String Boolean undefined null(表示占位的)
		//        引用值(堆数据)
		//            array object function ... data RegExp	 

		// 动态语言基本是解释性语言 解释性语言基本是脚本语言 我们声明关键只有一个var
		// 数据的类型天生是浮点型(带小数点的)
		// 计算机是基于一个数字0诞生的
		// 八位0101..组成一个字母
		// 布尔发明true false 把逻辑引深形成计算机基础语言
		// 一个变量声明为赋值是undefined

		// 原始值 stack(栈   first in last out 最先进去的永远最后出来)   赋值 == 拷贝  互不影响
		// var a = 123.14;
		// var b = "";
		// var b = true/ fasle;

		// var a = 10;
		// var b = a;
		// a = 20;
		// document.write(b);

		// 引用值  heap(大致存在堆  散列结构)     栈内存存的是堆内存的地址 方便找到它的内容

		// 开了一个新的房间
		// var arr1 = [1, 2];
		// var arr1 = arr;
		// arr = m[1, 3];
		// document.write(arr); 


		// var arr = [1, 2];
		// var arr1 = arr;
		// arr.push(3);
		// document.write(arr1);

		// var c = 1 + 1 + 'a' + '(1 + 2)';

		// var a = 1;
		// var b = a-- + --a;
		// document.write(b);
		
		// 我们得语言由值决定类型 其他语言由类型决定值
		// 原始值和引用值唯一的不同是赋值形式的不同
		// 原始值有个特点: 不可改变的原始值 除非内存满了被覆盖的 内存删掉的只是把关系剪掉

		// 操作系统的知识
		// 内存格里有这样的东西 就有专门的设备把它原来的名字 标号 指针 还原回来  把你数据抽取出来
		//     因为你的数据原本存在那里 怎么删掉呢??  从内存的初始点一直存到最后的一个数据结构 
		//      满的生活提醒你内存满了  二轮覆盖 抹掉之前的指针

		// js语句基本规则
		//    语句后面要用分号结束 ";"
		//    js语法错误会引发后续代码的终止 但不会影响其他的js代码块
		//    书写格式要规范, "+-/-"两边应该有空格

		// 错误分成两种
		//     1. 低级错误 (语法解析错误)
		//            var a = 10;
		// 		      document.write(a);
		// 		      var b = 20;
		// 		      document.write(b);
		//     2. 逻辑错误 (标准错误 情有可原)

		// js操作符
		// 运算操作符
		// "+"
		//  1. 数字运算 字符串连接
		//  2. 任何数据类型加字符串都等于字符串
		// "-" "*" "/" "%" "=" "()"
		// 优先级"="最弱  "()"优先级最高
		// "++" "--" "+=" "-=" "/=" "*=" "%="

		// NaN = Not a Number

	</script>

</body>
</html>