<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>

    <script>

        // 正则表达式

        // 课前补充
        //     转义字符 '\'   // 把反斜杠后的东西转化为正常文本 转义符号不输出
        //     多行字符串
        //     字符串换行符\n

        // 回车 == \r\n
        // \r 行结束符
        // 系统规定字符串是不能多行显示的
        // 在每一行结束加个\它会把后面的文本形式的回车把它转义掉 让它不再是回车

        // 字符串换行
        // var test = '\
        // <div></div>\
        // <span></span>\
        // ';
        // var str = 'acd\rned';
        // var test1 = '<div></div>' + 
        //             '<span></span>';
        // console.log(str);            

        // \t === 四个空格(一般)
        // \t制表符
        // 字符串是不能多行展示在文档

        // var str = "abcd'edf";
        // var str1 = "abcd\nedf"
        // document.write(str);
        // document.write()当文档流输出了 文档里识别不了回车 回车都变成了文字分割符了 都变成了一个小空格了
        //                 所以看它是不是多行字符串 只能console.log()

        // 压一个回车在底层的操作系统里 代表行结束了 也换行了 在有些操作系统里 比如linux只有\n功能没有\r

        // RegExp
        //    正则表达式的作用: 匹配特殊字符或有特殊搭配原则的字符的最佳选择

        // 正则表达式不是一个单独的规则 它是一个规则的对象 这个对象里包含的信息是规则

        // 两种创建方式
        //     直接量
        //     new RegExp();
        //        个人推荐用直接量

        // var reg = /abc/;
        // var str = 'abcd';
        // console.log(reg.test(str));

        // var reg = new RegExp('abc', 'i');
        // var str = 'Abcd';
        // console.log(reg.test(str));

        // var reg = new RegExp('abc');
        // var reg = new RegExp('abc', 'm'); // 第二个参数写属性

        // var reg = /123/;
        // var reg1 = new RegExp(reg);
        // reg.test(str);
        // var reg = /123/;
        // var reg1 = RegExp(reg);

        // 修饰符(可自由组合)  描述
        // i                  执行对大小写不敏感的匹配
        // g                  执行全局匹配 (查找所有匹配而非找到第一个匹配后停止)
        // m                  执行多行匹配

        // var reg = /ab/g;
        // var str = 'ababab';
        // console.log(str.match(reg));

        // var reg = /^a/gm;
        // var str = 'abcde\na';
        // console.log(str.match(reg));
        
        // 一个方括号代表一位
        // 一个表达式里面填的东西就是你这个表达式可以取到的范围
        // 一个表达式代表一位 里面填的东西就是区间
        // ^放到表达式代表非
        // ^放到外面表示头位
        // ()这个括号和数字的括号没什么区别 但数学的括号起到优先计算
        // | 表或
        
        // 表达式
        // [abc]    查找方括号之间的任何字符串
        // [^abc]   查找不在方括号之间的字符串
        // [0-9]    查找任何0至9的数字
        // [a-z]    查找任何小写a到小写z的字符
        // [A-Z]    查找任何大写A到大写Z的字符
        // [A-z]    查找任何从大写A到小写z的字符
        // [adgk]   查找给定集合内的任何字符
        // [^adgk]  查找给定集合外的任何字符
        // (red|blue|green)  查找任何指定的选项

        // var reg = /[0-9A-Z][cd][d]/g;
        // var str = 'ab1cd';
        // console.log(str.match(reg));

        // var reg = /[^a][^b]/g;
        // var str = 'bacd';
        // console.log(str.match(reg));

        // var reg = /(abc|bcd)[0-9]/g;
        // var str = 'bcd1';
        // console.log(str.match(reg));

        // 元字符和表达式其实一样的 也表示一位
        // 表达式可以写元字符 可以写多个
        // 在正则表达式写一个空格 就可以匹配一个空格

        // 元字符  描述
        // .(不能放在表达式)   查找单个字符 除了换行和行结束
        // \w                 查找单词字符
        // \W                 查找非单词字符
        // \d                 查找数字字符
        // \D                 查找非数字字符
        // \s                 查找空白字符
        // \S                 查找非空白字符
        // \b                 匹配单词边界
        // \B                 匹配非单词边界
        // \O                 查找NUL字符
        // \n                 查找换行符
        // \f                 查找换页符
        // \r                 查找回车符
        // \t                 查找制表符  // 匹配的不是视觉上的tab键 是真的\t
        // \v                 查找垂直制表符
        // \xxx               查找以九进制数xxx规定的字符
        // \xdd               查找以十六进制数dd规定的字符
        // \uxxxx             查找以十六进制数xxxx规定的Unicode字符

        // word
        // \w === [0-9A-z ]
        // \W === [^\w]
        // \d === [0-9]
        // \D === [^\d]
        // \s === [\t\n\r\v\f ]
        // \S === [^\s]
        // \b === 单词边界
        // \B === 非单词边界
        // . === [^\r\n]

        // \u0000 --> 16进制的4位数
        // unicode编码一般为6位
        // 一个unicode编码对应一个字符 unicode编码和ascii编码表达的是一个意思
        //    只是一个ascii编码能对应一些特殊的字符 例如黑桃 红桃
        // 16层
        // \u010000 - \u01ffff  第一层区间
        // \u020000 - \u02ffff  第二层区间
        // \u100000 - \u10ffff  第十六层区间
        // unicode编码区间 0000-ffff(前两位表示第几层 后四位表示unicode编码范围)
        // [^n] === 非n
        // /^n/ === 以n开头
        // unicode编码可以匹配汉字 它和ascii编码一样有区间 

        // var reg = /\Wcd2/;
        // var str = 'b*cd2';
        // console.log(str.match(reg));
        // var reg = /\d\d\d/g;
        // var str = '323133';
        // console.log(str.match(reg));
        // var reg = /[\w\d]/g;
        // var str = 's';
        // console.log(str.match(reg));
        // var reg = /\bbcd\b/;
        // var str = 'axs bcd dbcd';
        // console.log(str.match(reg));
        // var reg = /\na/g;
        // var str = 'wx\nabc';
        // console.log(str.match(reg));
        // var reg = /[\d\D]/g;
        // var str = '老邓身体好'
        // console.log(str.match(reg));
        // var reg = /./g;
        // var str = '老邓身体好';
        // console.log(str.match(reg));
        // var reg = /\u8001\u9093\u8eab\u4f53\u597d/g;
        // var reg = /[\u0000-\u9999]/g;
        // var str = '老邓身体好';
        // console.log(str.match(reg)); 

        //********************************************************************************************************************

        // 什么叫量词???   代表数量的词

        // 量词   描述
        // n+     匹配任何包含至少一个n的字符串
        // n*     匹配任何包含零个至少多个n的字符串
        // n?     匹配任何包含零个或一个n的字符串
        // n{*}   匹配包含x个n的序列的字符串
        // n{x,y} 匹配包含x至y个n的序列的字符串
        // n$     匹配任何结尾为n的字符串
        // ^n     匹配任何开头为n的字符串
        // ?=n    匹配任何其后紧接指定字符串n的字符串
        // ?!n    匹配任何其后没有紧接指定字符串n的字符串

        // n+      {1, }        
        // n*      {0, }
        // n?      {0,1}
        // n{x}    {x}
        // n{x,y}  {x,y}
        // n{x, }  {x, }

        // 它的原则是能多就不能少 这叫贪婪匹配原则
        
        // var str = 'abs';
        // var reg = /\w*/g;
        // var reg = /\w+/g;
        // console.log(str.match(reg));
        // var reg = /\d*/g;
        // var str = 'abc';
        // console.log(str.match(reg));

        // var reg = /bf$/g;
        // var str = 'abf';
        // console.log(str.match(reg));
        // var reg = /^abc$/g;  // 有开头和结尾就限定了字符串的长度
        // var str = 'abcabc';
        // console.log(str.match(reg));
        // var reg = /\w{1,2}/g;
        // var str = 'aaaa';
        // console.log(str.match(reg));


        // 用一个正则表达式检验一个字符串首尾是否含有数字(或)

                // 都
        // var reg = /^\d[\s\S]*\d$/g;
        // var str = '123abc1123';
        // console.log(str.match(reg));

                // 或
        // var reg = /^\d|\d$/g;
        // var str = '1aaaa1';
        // console.log(str.match(reg));     


        //  人的一生会经历很多挫折  我没考上好的大学 上了专科 但是我并没有放弃  好比我们经常在电视看到一些普通的人为追寻自己的梦想 
        //      他们对于很多人异样的眼光 但他们并没有放弃 同样我热爱前端开发 我的学历低 但我永远不会质疑自己的能力 我愿意花一辈子的时间去热爱它
        //                                                                                            ----- 一个在前端构架师路上的小白


        // 属性        描述
        // global      RegExp对象是否具有标志g
        // ignoreCase  RegExp对象是否含有标志i
        // latsIndex   一个整数 标志开始下一次匹配的字符位置
        // multiline   RegExp对象是否含有标志m
        // source      正则表达式的源文件

        // 方法       描述
        // compile   编译正则表达式
        // exec      搜索字符串指定的值  返回找到的值并确定其位置
        // test      检索字符串指定的值 返回true或  false

        // var reg = /ab/g;
        // var str = 'ababab';
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));

        // var reg = /ab/;
        // var str = 'ababab';
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));
        // console.log(reg.lastIndex);
        // console.log(reg.exec(str));

        // \1表示引用第一个子表达式的内容
        // 子表达式()会记录里面匹配的内容  记录之后我们可以用一个东西反向引用
        // lastIndex没有变和一样返回
        // 
        // var str = 'aabb';
        // var reg = /(\w)\1(\w)\2/g;
        // console.log(reg.exec(str));
        // console.log(str.match(reg));


        // 支持正则表达式的String对象的方法
        // 方法    描述
        // search  检索与正则表达式相匹配的值   // 匹配不到返回-1
        // match   找到一个或多个正则表达式的匹配
        // replace 替换与正则表达式匹配的字符串
        // split   把字符串分割为字符串数组

        // var str = 'eebbccabco1';
        // var reg = /(\w)\1(\w)\2/g;
        // console.log(reg.exec(str));
        // console.log(str.match(reg));
        // console.log(str.search(reg));
        // console.log(str.split(reg)); // 把子表达式返回

        // 非正则表达式没有访问全局的能力
        // var str = 'aa';
        // console.log(str.replace('a', 'b'));
        // var reg = /a/g;
        // var str = 'aa';
        // console.log(str.replace(reg, 'b'));

        // 把形如aabb变成bbaa
        // 替换的部分一定要写成字符串
        // var reg1 = /(\w)\1(\w)\2/g;
        // var str1 = 'aabb';
        // console.log(str1.replace(reg1, 'b'));
        // console.log(str1.replace(reg1, '$1$2$1$2'));
        // console.log(str1.replace(reg1, function($, $1, $2) { // 1. 第一个参数就是正则表达式匹配的全局结果  2. 这个方法系统帮我们调用
            // return $2 + $2 + $1 + $1 + 'new';
        // }))


        // 编程先找规律
        // var reg = /-(\w)/g;
        // var str = 'the-first-name';
        // console.log(str.replace(reg, 'F'));
        // console.log(str.replace(reg, function($, $1) { // 它匹配了多少次就有多少次function执行
            // return $1.toUpperCase();
        // }))


        // 正向断言 正向预查
        // var str = 'abaaaa';
        // var reg = /a(?=b)/g; // b不参与选择 参与修饰/限定
        // var reg1 = /a(?!b)/g;
        // console.log(str.match(reg));

        // var str = 'aaa';
        // var reg = /a{1,2}?/g; // 取消贪婪匹配 在任何量词后面加个问号 能少不多
        // console.log(str.match(reg));

        // var str = 'aaa';
        // var reg = /a??/g; // 第一个?代表量词 第二个?代表取消贪婪匹配 能取0都不取1
        // console.log(str.match(reg));

        // var str = 'aaa aaa';
        // var reg = / /g; // 在正则里写任何东西都算正则表达式匹配的内容
        // console.log(str.match(reg));

        // var reg = /\?/g;
        // var str = 'a\?aa';
        // console.log(str.match(reg));

        // var str = 'aa\\aaaa';
        // var reg = /\\/g;
        // console.log(str.match(reg));

        // var str = 'aa?aaaa';
        // var reg = /\?/g;
        // console.log(str.match(reg));


        // 字符串去重
        // var str = 'aaaabbbbbbbbbbbbbcccccccccccccc';
        // var reg = /(\w)\1*/g;
        // console.log(str.replace(reg, '$1'));


        // 百度面试题
        // var str = '100000000000';
        // var reg = /\B(?=((\w){3})+$)/g;
        // console.log(str.replace(reg, '.'));

        // 作业: Regexp.String 和PDF正则表达式

    </script>
    
</body>
</html>