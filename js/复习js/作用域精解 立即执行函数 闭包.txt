  // 作用域精解
    // [[scope]]:每个javascript函数都是一个对象,对象有些属性我们可以访问,但有些不可以,这些属
    //           性仅供javascript引擎存取,[[scope]]就是其中一个。[[scope]]指的就是我们所说
    //           的作用域,其中存储的了运行期的上下文的集合。
    // 作用域链:[[scope]]所存储的执行期上下文对象的集合,这个集合呈链式链接,我们把这种链式链接
    //          叫做作用域链。          
    // 运行期上下文:当函数执行时,会创建一个称为执行期上下文的内部对象。一个执行期上下文定义了一个
    //             函数执行时的环境,函数每次执行时的执行上下文都是独一无二的,所以多次调用一个函数
    //             会创建多个执行期上下文,当函数执行完毕,它所产生的执行上下文被销毁。
    // 查找变量:从作用域链的顶端依次向下查找。

    // 作用域是因为函数产生的所产生的东西
    // 作用域属于一个函数,一个函数产生一样的作用域
    // 对象有属性和方法,都是为了存值的
    // 一切为对象的东西都有属性和方法

    // function test() {}
    // test.[[scope]] --> 隐式属性,系统会通过它的内部原理调用,你不能用
    // AO GO就是执行期上下文
    // 环境: 例如函数提升/变量提升
    // test(); --> AO {};
    // test(); --> AO {};
    // AO指作为及时的存储空间,用完就不要了
    // 在哪个函数的作用域查找变量就上哪个函数的作用域链的顶端依次往下查找
    // 如果函数不执行根本不会读里面的代码 


            // function a() {
            //     function b() {
            //         var b = 234;
            //     }
            //     var a = 123;
            //     b();
            // }
            // var glob = 100;
            // a();
            // a defined a.[[scope]]-- > 0 : GO
            // a doing   a.[[scope]]-- > 0 : aAO
            //                           1 : GO
            // b defined b.[[scope]]-- > 0 : aAO
            //                           1 : GO
            // b doing   b.[[scope]]-- > 0 : bAO
            //                           1 : aAO
            //                           2 : GO
            // b doing   b.[[scope]]-- > 0 : new bAO
            //                           1 : aAO
            //                           2 : GO                         
        // **************************************************************************************
            // 立即执行函数
            // 闭包: 当内部函数被保存到外部时,将会生成闭包。闭包会导
            //      致原有的作用域链不释放,造成内存泄漏
            // 闭包的作用
            //    实现共有变量
            //        eg: 函数累加器
            //    可以做缓存
            //        eg: eater
            //    可以实现封装,属性私有化
            //        eg: Person();
            //    模块化开发,防止污染全局变量

            // // 累加器
            // function add() {
            //     var count = 0;
            //     function demo() {
            //         count ++;
            //         console.log(count);
            //     }
            //     return demo;
            // }
            // var counter = add();
            // counter();
            // counter();
            
            // 哪个先执行完哪个就先销毁
            // function a() {
            //     function b() {
            //         function c() {}
            //         c();
            //     }
            //     b();
            // }
            // a();

            // 1对2的闭包
            // function test() {
            //     var num = 100;
            //     function a() {
            //         num ++;
            //         console.log(num);
            //     }
            //     function b() {
            //         num --;
            //         console.log(num);
            //     }
            //     return [a, b];
            // }
            // var myArr = test();
            // myArr[0]();
            // myArr[1]();

            // // 缓存
            // function eater() {
            //     var food = '';
            //     var obj = {
            //         eat: function() {
            //             console.log('i am eating'  + ' ' + food);
            //             food = '';
            //         },
            //         push: function(myFood) {
            //             food = myFood;
            //         }
            //     }
            //     return obj;
            // }
            // var eater1 = eater();
            // eater1.push('banana');
            // eater1.eat();

            // 立即执行函数
            // 定义: 此类函数没有声明,在一次执行过后即释放。适合做初始化工作
            
            //  function test() {}
            // 等待被执行会占空间
            // 不想这些过多空间被占用,浪费效率  --> 使用立即执行函数

            // 立即执行函数: 针对初始化功能的函数 =》只想执行一次,返回处理结果
            // 立即执行函数执行完就被销毁
            // 立即执行函数与普通函数的区别: 执行完就被释放了
            // 立即执行函数: javascript提供唯一的函数,执行完就自动销毁了

            // (function() {
            //     var a = 123;
            //     var b = 234;
            //     console.log(a + b);
            // }())    

            // (function (a, b, c) {
            //     console.log(a + b + c * 2);
            // }(1, 2, 3))
    
            // 除了初始化页面改变了颜色,不需要返回值的
            // 初始化数据都要这样写,必须return回来数据
            // var num = (function(a, b, c) {
            //     var d = a + b + c * 2 - 2;
            //     return d;
            // })(1, 2, 3);    
            
            // 立即执行函数也有预编译和执行期上下文
            // 函数定义: 1. 函数声明 function test() {}
            //          2. 函数表达式 123;  13 + 12;

            // (function () {}());   W3C建议第一种
            // (function () {})();    
            // 只有表达式才能被执行符号执行 (能被执行符号执行的函数表达式自动放弃函数名)
            // 函数声明是不能被执行符号执行的,会报错的
            // 能被执行符号执行的函数几乎成了立即执行函数了
            // 立即执行函数被执行后忽略函数的引用

            // var test = function () {
            //     console.log('a');
            // }();

            // + - ! (fn) && || =
            // 1 && function test() {
            //     console.log('a');
            // }();

            // function test(a, b, c) {
            //     console.log(a + b + c);  // 不报错,但没意义
            // }(1, 2, 3); // 逗号运算符   --> 表达式

            // var test = function() {}();   // 1.先变量声明   2.变量赋值
            // 把fn赋值到test的过程叫做表达式
            // 执行时会放弃fn储存到test的引用

  //*******************************************************
            // 闭包
            // function test() {
            //     var arr = [];
            //     for(var i = 0; i < 10; i++) {
            //         arr[i] = function() { // 语句执行  =   函数定义
            //             console.log(i);
            //         }
            //     }
            //     return arr;
            // }
            // var myArr = test();
            // for(var i = 0; i < 10; i++) {
            //     myArr[i]();
            // }

            // function test() {
            //     var arr = [];
            //     for(var i = 0; i < 10; i++) {
            //         (function(j) {
            //             arr[j] = function() {
            //                 console.log(j);
            //             }
            //         }(i))
            //     }
            //     return arr;
            // }
            // var myArr = test();
            // for(var i = 0; i < 10; i++) {
            //     myArr[i]();
            // }